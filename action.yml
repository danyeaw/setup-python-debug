name: 'Debug Python'
description: 'Installs Python with Debug Extensions'
inputs:
  python-version:
    description: 'Python version to build'
    required: true
runs:
  using: composite
  steps:
    - name: Cache (Python)
      uses: actions/cache@v2.1.7
      id: cache-python
      with:
        path: $RUNNER_TOOL_CACHE/Python/
        key: '${{ runner.os }}-PythonCache-v${{ inputs.python-version }}-dbg'

    - name: Download Python
      if: steps.cache-python.outputs.cache-hit != 'true'
      uses: carlosperate/download-file-action@v1.0.3
      id: download-python
      with:
        file-url: 'https://www.python.org/ftp/python/${{ inputs.python-version }}/Python-${{ inputs.python-version }}.tar.xz'
        file-name: 'Python-${{ inputs.python-version }}.tar.xz'
        location: '${{ runner.workspace }}/dl/'

    - name: Enable Source Repository
      if: steps.cache-python.outputs.cache-hit != 'true'
      run: |
        sudo sed -i '/deb-src/s/^# //' /etc/apt/sources.list
      shell: bash

    - name: Install Build Dependencies
      if: steps.cache-python.outputs.cache-hit != 'true'
      run: >
        sudo apt-get update -qq && sudo apt-get build-dep python3 && sudo apt-get install -qq pkg-config
        build-essential gdb lcov libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev
        libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev
        lzma lzma-dev tk-dev uuid-dev zlib1g-dev
      shell: bash

    - name: Build Python with Debug
      if: steps.cache-python.outputs.cache-hit != 'true'
      run: |
        cd ${{ runner.workspace }}/dl
        tar -xf Python-${{ inputs.python-version }}.tar.xz
        cd Python-${{ inputs.python-version }}
        ./configure --with-pydebug --prefix=$RUNNER_TEMP/Python/ && make -j && make install
      shell: bash

    - name: Install Python in the Runner Tools
      if: steps.cache-python.outputs.cache-hit != 'true'
      run: |
        # https://github.com/actions/python-versions/
        # MIT License
        # Copyright (c) 2020 GitHub

        set -e

        PYTHON_FULL_VERSION=${{ inputs.python-version }}
        MAJOR_VERSION=$(echo $PYTHON_FULL_VERSION | cut -d '.' -f 1)
        MINOR_VERSION=$(echo $PYTHON_FULL_VERSION | cut -d '.' -f 2)

        PYTHON_MAJOR=python$MAJOR_VERSION
        PYTHON_MAJOR_DOT_MINOR=python$MAJOR_VERSION.$MINOR_VERSION
        PYTHON_MAJORMINOR=python$MAJOR_VERSION$MINOR_VERSION

        if [ -z ${AGENT_TOOLSDIRECTORY+x} ]; then
        # No AGENT_TOOLSDIRECTORY on GitHub images
        TOOLCACHE_ROOT=$RUNNER_TOOL_CACHE
        else
        TOOLCACHE_ROOT=$AGENT_TOOLSDIRECTORY
        fi

        PYTHON_TOOLCACHE_PATH=$TOOLCACHE_ROOT/Python
        PYTHON_TOOLCACHE_VERSION_PATH=$PYTHON_TOOLCACHE_PATH/$PYTHON_FULL_VERSION
        PYTHON_TOOLCACHE_VERSION_ARCH_PATH=$PYTHON_TOOLCACHE_VERSION_PATH/x64

        echo "Check if Python hostedtoolcache folder exist..."
        if [ ! -d $PYTHON_TOOLCACHE_PATH ]; then
        echo "Creating Python hostedtoolcache folder..."
        mkdir -p $PYTHON_TOOLCACHE_PATH
        elif [ -d $PYTHON_TOOLCACHE_VERSION_PATH ]; then
        echo "Deleting Python $PYTHON_FULL_VERSION"
        rm -rf $PYTHON_TOOLCACHE_VERSION_PATH
        fi

        echo "Create Python $PYTHON_FULL_VERSION folder"
        mkdir -p $PYTHON_TOOLCACHE_VERSION_ARCH_PATH

        echo "Copy Python binaries to hostedtoolcache folder"
        cd $RUNNER_TEMP/Python
        cp -R ./* $PYTHON_TOOLCACHE_VERSION_ARCH_PATH
        # rm $PYTHON_TOOLCACHE_VERSION_ARCH_PATH/setup.sh

        cd $PYTHON_TOOLCACHE_VERSION_ARCH_PATH

        echo "Create additional symlinks (Required for the UsePythonVersion Azure Pipelines task and the setup-python GitHub Action)"
        ln -s ./bin/$PYTHON_MAJOR_DOT_MINOR python

        cd bin/
        ln -s $PYTHON_MAJOR_DOT_MINOR $PYTHON_MAJORMINOR
        if [ ! -f python ]; then
        ln -s $PYTHON_MAJOR_DOT_MINOR python
        fi

        chmod +x ../python $PYTHON_MAJOR $PYTHON_MAJOR_DOT_MINOR $PYTHON_MAJORMINOR python

        echo "Upgrading PIP..."
        ./python -m ensurepip
        ./python -m pip install --ignore-installed pip --no-warn-script-location

        echo "Create complete file"
        touch $PYTHON_TOOLCACHE_VERSION_PATH/x64.complete
      shell: bash

    - name: Copy Python gdb Module to Cache
      if: steps.cache-python.outputs.cache-hit != 'true'
      run: |
        cp ${{ runner.workspace }}/dl/Python-${{ inputs.python-version }}/python-gdb.py $RUNNER_TOOL_CACHE/Python/${{ inputs.python-version }}/x64/
      shell: bash

    - name: Add Python to path
      run: |
        echo "$RUNNER_TOOL_CACHE/Python/${{ inputs.python-version }}/x64/bin" >> $GITHUB_PATH
        echo "$RUNNER_TOOL_CACHE/Python/${{ inputs.python-version }}/x64" >> $GITHUB_PATH
        echo "$GITHUB_PATH"
      shell: bash

    - name: Copy Python gdb Module to Workspace and Add to gdbinit
      run: |
        cp $RUNNER_TOOL_CACHE/Python/${{ inputs.python-version }}/x64/python-gdb.py $GITHUB_WORKSPACE/
        echo "add-auto-load-safe-path $GITHUB_WORKSPACE" >> ~/.gdbinit
      shell: bash

    - name: Display Python version
      run: |
        import sys
        print(sys.version)
        print("Debug build?", hasattr(sys, 'gettotalrefcount'))
      shell: python
